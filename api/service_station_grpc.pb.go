// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceStationServiceClient is the client API for ServiceStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceStationServiceClient interface {
	Get(ctx context.Context, in *ServiceStationRequest, opts ...grpc.CallOption) (*FindServiceStationResult, error)
	Find(ctx context.Context, in *FindServiceStationRequest, opts ...grpc.CallOption) (*FindServiceStationResponse, error)
	Create(ctx context.Context, in *ServiceStation, opts ...grpc.CallOption) (*ServiceStationResponse, error)
	Update(ctx context.Context, in *ServiceStation, opts ...grpc.CallOption) (*ServiceStationResponse, error)
	Delete(ctx context.Context, in *ServiceStationRequest, opts ...grpc.CallOption) (*ServiceStationResponse, error)
}

type serviceStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStationServiceClient(cc grpc.ClientConnInterface) ServiceStationServiceClient {
	return &serviceStationServiceClient{cc}
}

func (c *serviceStationServiceClient) Get(ctx context.Context, in *ServiceStationRequest, opts ...grpc.CallOption) (*FindServiceStationResult, error) {
	out := new(FindServiceStationResult)
	err := c.cc.Invoke(ctx, "/api.ServiceStationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceStationServiceClient) Find(ctx context.Context, in *FindServiceStationRequest, opts ...grpc.CallOption) (*FindServiceStationResponse, error) {
	out := new(FindServiceStationResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceStationService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceStationServiceClient) Create(ctx context.Context, in *ServiceStation, opts ...grpc.CallOption) (*ServiceStationResponse, error) {
	out := new(ServiceStationResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceStationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceStationServiceClient) Update(ctx context.Context, in *ServiceStation, opts ...grpc.CallOption) (*ServiceStationResponse, error) {
	out := new(ServiceStationResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceStationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceStationServiceClient) Delete(ctx context.Context, in *ServiceStationRequest, opts ...grpc.CallOption) (*ServiceStationResponse, error) {
	out := new(ServiceStationResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceStationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceStationServiceServer is the server API for ServiceStationService service.
// All implementations must embed UnimplementedServiceStationServiceServer
// for forward compatibility
type ServiceStationServiceServer interface {
	Get(context.Context, *ServiceStationRequest) (*FindServiceStationResult, error)
	Find(context.Context, *FindServiceStationRequest) (*FindServiceStationResponse, error)
	Create(context.Context, *ServiceStation) (*ServiceStationResponse, error)
	Update(context.Context, *ServiceStation) (*ServiceStationResponse, error)
	Delete(context.Context, *ServiceStationRequest) (*ServiceStationResponse, error)
	mustEmbedUnimplementedServiceStationServiceServer()
}

// UnimplementedServiceStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceStationServiceServer struct {
}

func (UnimplementedServiceStationServiceServer) Get(context.Context, *ServiceStationRequest) (*FindServiceStationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceStationServiceServer) Find(context.Context, *FindServiceStationRequest) (*FindServiceStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedServiceStationServiceServer) Create(context.Context, *ServiceStation) (*ServiceStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceStationServiceServer) Update(context.Context, *ServiceStation) (*ServiceStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceStationServiceServer) Delete(context.Context, *ServiceStationRequest) (*ServiceStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceStationServiceServer) mustEmbedUnimplementedServiceStationServiceServer() {}

// UnsafeServiceStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceStationServiceServer will
// result in compilation errors.
type UnsafeServiceStationServiceServer interface {
	mustEmbedUnimplementedServiceStationServiceServer()
}

func RegisterServiceStationServiceServer(s grpc.ServiceRegistrar, srv ServiceStationServiceServer) {
	s.RegisterService(&ServiceStationService_ServiceDesc, srv)
}

func _ServiceStationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceStationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceStationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceStationServiceServer).Get(ctx, req.(*ServiceStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceStationService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServiceStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceStationServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceStationService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceStationServiceServer).Find(ctx, req.(*FindServiceStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceStationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceStationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceStationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceStationServiceServer).Create(ctx, req.(*ServiceStation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceStationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceStationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceStationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceStationServiceServer).Update(ctx, req.(*ServiceStation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceStationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceStationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceStationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceStationServiceServer).Delete(ctx, req.(*ServiceStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceStationService_ServiceDesc is the grpc.ServiceDesc for ServiceStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceStationService",
	HandlerType: (*ServiceStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ServiceStationService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ServiceStationService_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ServiceStationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceStationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceStationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_station.proto",
}

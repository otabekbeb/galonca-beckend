// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoadsideServiceServiceClient is the client API for RoadsideServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoadsideServiceServiceClient interface {
	Get(ctx context.Context, in *RoadsideServiceRequest, opts ...grpc.CallOption) (*FindRoadsideServiceResult, error)
	Find(ctx context.Context, in *FindRoadsideServiceRequest, opts ...grpc.CallOption) (*FindRoadsideServiceResponse, error)
	Create(ctx context.Context, in *RoadsideService, opts ...grpc.CallOption) (*RoadsideServiceResponse, error)
	Update(ctx context.Context, in *RoadsideService, opts ...grpc.CallOption) (*RoadsideServiceResponse, error)
	Delete(ctx context.Context, in *RoadsideServiceRequest, opts ...grpc.CallOption) (*RoadsideServiceResponse, error)
}

type roadsideServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadsideServiceServiceClient(cc grpc.ClientConnInterface) RoadsideServiceServiceClient {
	return &roadsideServiceServiceClient{cc}
}

func (c *roadsideServiceServiceClient) Get(ctx context.Context, in *RoadsideServiceRequest, opts ...grpc.CallOption) (*FindRoadsideServiceResult, error) {
	out := new(FindRoadsideServiceResult)
	err := c.cc.Invoke(ctx, "/api.RoadsideServiceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadsideServiceServiceClient) Find(ctx context.Context, in *FindRoadsideServiceRequest, opts ...grpc.CallOption) (*FindRoadsideServiceResponse, error) {
	out := new(FindRoadsideServiceResponse)
	err := c.cc.Invoke(ctx, "/api.RoadsideServiceService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadsideServiceServiceClient) Create(ctx context.Context, in *RoadsideService, opts ...grpc.CallOption) (*RoadsideServiceResponse, error) {
	out := new(RoadsideServiceResponse)
	err := c.cc.Invoke(ctx, "/api.RoadsideServiceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadsideServiceServiceClient) Update(ctx context.Context, in *RoadsideService, opts ...grpc.CallOption) (*RoadsideServiceResponse, error) {
	out := new(RoadsideServiceResponse)
	err := c.cc.Invoke(ctx, "/api.RoadsideServiceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadsideServiceServiceClient) Delete(ctx context.Context, in *RoadsideServiceRequest, opts ...grpc.CallOption) (*RoadsideServiceResponse, error) {
	out := new(RoadsideServiceResponse)
	err := c.cc.Invoke(ctx, "/api.RoadsideServiceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadsideServiceServiceServer is the server API for RoadsideServiceService service.
// All implementations must embed UnimplementedRoadsideServiceServiceServer
// for forward compatibility
type RoadsideServiceServiceServer interface {
	Get(context.Context, *RoadsideServiceRequest) (*FindRoadsideServiceResult, error)
	Find(context.Context, *FindRoadsideServiceRequest) (*FindRoadsideServiceResponse, error)
	Create(context.Context, *RoadsideService) (*RoadsideServiceResponse, error)
	Update(context.Context, *RoadsideService) (*RoadsideServiceResponse, error)
	Delete(context.Context, *RoadsideServiceRequest) (*RoadsideServiceResponse, error)
	mustEmbedUnimplementedRoadsideServiceServiceServer()
}

// UnimplementedRoadsideServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoadsideServiceServiceServer struct {
}

func (UnimplementedRoadsideServiceServiceServer) Get(context.Context, *RoadsideServiceRequest) (*FindRoadsideServiceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoadsideServiceServiceServer) Find(context.Context, *FindRoadsideServiceRequest) (*FindRoadsideServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRoadsideServiceServiceServer) Create(context.Context, *RoadsideService) (*RoadsideServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoadsideServiceServiceServer) Update(context.Context, *RoadsideService) (*RoadsideServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoadsideServiceServiceServer) Delete(context.Context, *RoadsideServiceRequest) (*RoadsideServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoadsideServiceServiceServer) mustEmbedUnimplementedRoadsideServiceServiceServer() {
}

// UnsafeRoadsideServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadsideServiceServiceServer will
// result in compilation errors.
type UnsafeRoadsideServiceServiceServer interface {
	mustEmbedUnimplementedRoadsideServiceServiceServer()
}

func RegisterRoadsideServiceServiceServer(s grpc.ServiceRegistrar, srv RoadsideServiceServiceServer) {
	s.RegisterService(&RoadsideServiceService_ServiceDesc, srv)
}

func _RoadsideServiceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadsideServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadsideServiceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoadsideServiceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadsideServiceServiceServer).Get(ctx, req.(*RoadsideServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadsideServiceService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoadsideServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadsideServiceServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoadsideServiceService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadsideServiceServiceServer).Find(ctx, req.(*FindRoadsideServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadsideServiceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadsideService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadsideServiceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoadsideServiceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadsideServiceServiceServer).Create(ctx, req.(*RoadsideService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadsideServiceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadsideService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadsideServiceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoadsideServiceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadsideServiceServiceServer).Update(ctx, req.(*RoadsideService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadsideServiceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadsideServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadsideServiceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoadsideServiceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadsideServiceServiceServer).Delete(ctx, req.(*RoadsideServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadsideServiceService_ServiceDesc is the grpc.ServiceDesc for RoadsideServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadsideServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RoadsideServiceService",
	HandlerType: (*RoadsideServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RoadsideServiceService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _RoadsideServiceService_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RoadsideServiceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoadsideServiceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoadsideServiceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roadside_service.proto",
}
